
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000080  00000000  00000000  00000988  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000038f  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e8  00000000  00000000  00000d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000023c  00000000  00000000  00000e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000010bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000115  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000001e  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z9uart_initv>:
#define BAUD 9600 //Default Baud Rate for bluetooth device is 9600 
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)

void uart_init (void)
{
	UBRRL=BAUDRATE;	
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	89 b9       	out	0x09, r24	; 9
	UBRRH=(BAUDRATE>>8);
  96:	10 bc       	out	0x20, r1	; 32
	
	UCSRB|=(1<<TXEN)|(1<<RXEN); //enable Tx and Rx
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRC|=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  9e:	80 b5       	in	r24, 0x20	; 32
  a0:	86 68       	ori	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<UMSEL);		//Asynchronous mode communication 
  a4:	80 b5       	in	r24, 0x20	; 32
  a6:	8f 7b       	andi	r24, 0xBF	; 191
  a8:	80 bd       	out	0x20, r24	; 32
	UCSRC &= ~(1<<USBS);         //Set one stop bit
  aa:	80 b5       	in	r24, 0x20	; 32
  ac:	87 7f       	andi	r24, 0xF7	; 247
  ae:	80 bd       	out	0x20, r24	; 32
}
  b0:	08 95       	ret

000000b2 <_Z12uart_recievev>:

unsigned char uart_recieve (void)
{
	//RXC flag is one when unread data in UDR buffer and zero when UDR is empty.
	while(!(UCSRA) & (1<<RXC));//wait until received buffer UDR load new data.
  b2:	8b b1       	in	r24, 0x0b	; 11
	return UDR; //Return loaded data.
  b4:	8c b1       	in	r24, 0x0c	; 12
	
}
  b6:	08 95       	ret

000000b8 <_Z11USART_Flushv>:
{
	/*If the buffer has to be flushed during normal operation, due to for instance 
	an error condition, read the UDR I/O location until the RXC Flag is cleared.
	when buffer is empty RXC flag will be zero and break the while loop */
	unsigned char dummy;
	while ( UCSRA & (1<<RXC) ) dummy = UDR;
  b8:	5f 9b       	sbis	0x0b, 7	; 11
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <_Z11USART_Flushv+0xa>
  bc:	8c b1       	in	r24, 0x0c	; 12
  be:	5f 99       	sbic	0x0b, 7	; 11
  c0:	fd cf       	rjmp	.-6      	; 0xbc <_Z11USART_Flushv+0x4>
  c2:	08 95       	ret

000000c4 <main>:
}



int main(void)
{	TCCR1A|=(1<<WGM11)|(1<<COM1A1);
  c4:	8f b5       	in	r24, 0x2f	; 47
  c6:	82 68       	ori	r24, 0x82	; 130
  c8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B|=(1<<WGM12)|(1<<WGM13)|(1<<CS10);
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	89 61       	ori	r24, 0x19	; 25
  ce:	8e bd       	out	0x2e, r24	; 46
	ICR1=19999;
  d0:	8f e1       	ldi	r24, 0x1F	; 31
  d2:	9e e4       	ldi	r25, 0x4E	; 78
  d4:	97 bd       	out	0x27, r25	; 39
  d6:	86 bd       	out	0x26, r24	; 38
	DDRD|=(1<<PD4)|(1<<PD5);
  d8:	81 b3       	in	r24, 0x11	; 17
  da:	80 63       	ori	r24, 0x30	; 48
  dc:	81 bb       	out	0x11, r24	; 17
	DDRB=0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23
	OCR1A=800;
  e2:	80 e2       	ldi	r24, 0x20	; 32
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	9b bd       	out	0x2b, r25	; 43
  e8:	8a bd       	out	0x2a, r24	; 42
	unsigned char byte_received;
	
	uart_init(); //Initialize UART communication
  ea:	0e 94 49 00 	call	0x92	; 0x92 <_Z9uart_initv>
				PORTB =0b00000001;	
			}
				break;
			case 10://right backward
			{
				PORTB =0b00001001;		
  ee:	c9 e0       	ldi	r28, 0x09	; 9
			}
				break;
			case 12 ://left back
			{
				PORTB =0b00000101;
  f0:	d5 e0       	ldi	r29, 0x05	; 5
				
			}
				break;
			case 3 :
			{
					PORTB=0b00001010; //right forward	
  f2:	1a e0       	ldi	r17, 0x0A	; 10
			}
				break;
			case 5 ://left forward
			{
						
				PORTB =0b00000110;
  f4:	06 e0       	ldi	r16, 0x06	; 6
										
			}
				break;
			case 4 ://left
			{
				PORTB =0b00000100;
  f6:	ff 24       	eor	r15, r15
  f8:	68 94       	set
  fa:	f2 f8       	bld	r15, 2
			}
				break;
			case 8://back
			{
				
				PORTB =0b00000001;	
  fc:	dd 24       	eor	r13, r13
  fe:	d3 94       	inc	r13
			
		switch (byte_received)
		{			
			case 1: 
			{
				PORTB =0b00000010;
 100:	cc 24       	eor	r12, r12
 102:	68 94       	set
 104:	c1 f8       	bld	r12, 1
			
			}
				break;
			case 2 :
			{
				PORTB =0b00001000;//right
 106:	bb 24       	eor	r11, r11
 108:	68 94       	set
 10a:	b3 f8       	bld	r11, 3
	uart_init(); //Initialize UART communication
	
	
	while(1)
	{
		if ((UCSRA) & (1<<RXC))
 10c:	5f 9b       	sbis	0x0b, 7	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <main+0x48>
		{
			byte_received=uart_recieve();
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <_Z12uart_recievev>
 114:	e8 2e       	mov	r14, r24
			USART_Flush(); //After receiving one byte FIFO buffer is cleared 
 116:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z11USART_Flushv>
			
		switch (byte_received)
 11a:	2a e0       	ldi	r18, 0x0A	; 10
 11c:	e2 16       	cp	r14, r18
 11e:	f1 f1       	breq	.+124    	; 0x19c <main+0xd8>
 120:	2e 15       	cp	r18, r14
 122:	b8 f0       	brcs	.+46     	; 0x152 <main+0x8e>
 124:	83 e0       	ldi	r24, 0x03	; 3
 126:	e8 16       	cp	r14, r24
 128:	89 f1       	breq	.+98     	; 0x18c <main+0xc8>
 12a:	8e 15       	cp	r24, r14
 12c:	40 f0       	brcs	.+16     	; 0x13e <main+0x7a>
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	e2 16       	cp	r14, r18
 132:	41 f1       	breq	.+80     	; 0x184 <main+0xc0>
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	e8 16       	cp	r14, r24
 138:	09 f0       	breq	.+2      	; 0x13c <main+0x78>
 13a:	4e c0       	rjmp	.+156    	; 0x1d8 <main+0x114>
 13c:	25 c0       	rjmp	.+74     	; 0x188 <main+0xc4>
 13e:	25 e0       	ldi	r18, 0x05	; 5
 140:	e2 16       	cp	r14, r18
 142:	41 f1       	breq	.+80     	; 0x194 <main+0xd0>
 144:	e2 16       	cp	r14, r18
 146:	20 f1       	brcs	.+72     	; 0x190 <main+0xcc>
 148:	88 e0       	ldi	r24, 0x08	; 8
 14a:	e8 16       	cp	r14, r24
 14c:	09 f0       	breq	.+2      	; 0x150 <main+0x8c>
 14e:	44 c0       	rjmp	.+136    	; 0x1d8 <main+0x114>
 150:	23 c0       	rjmp	.+70     	; 0x198 <main+0xd4>
 152:	28 e1       	ldi	r18, 0x18	; 24
 154:	e2 16       	cp	r14, r18
 156:	31 f1       	breq	.+76     	; 0x1a4 <main+0xe0>
 158:	2e 15       	cp	r18, r14
 15a:	50 f0       	brcs	.+20     	; 0x170 <main+0xac>
 15c:	8c e0       	ldi	r24, 0x0C	; 12
 15e:	e8 16       	cp	r14, r24
 160:	f9 f0       	breq	.+62     	; 0x1a0 <main+0xdc>
 162:	e8 16       	cp	r14, r24
 164:	c8 f1       	brcs	.+114    	; 0x1d8 <main+0x114>
 166:	8e 2d       	mov	r24, r14
 168:	80 51       	subi	r24, 0x10	; 16
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	a8 f5       	brcc	.+106    	; 0x1d8 <main+0x114>
 16e:	1a c0       	rjmp	.+52     	; 0x1a4 <main+0xe0>
 170:	20 e2       	ldi	r18, 0x20	; 32
 172:	e2 16       	cp	r14, r18
 174:	88 f1       	brcs	.+98     	; 0x1d8 <main+0x114>
 176:	81 e2       	ldi	r24, 0x21	; 33
 178:	8e 15       	cp	r24, r14
 17a:	08 f5       	brcc	.+66     	; 0x1be <main+0xfa>
 17c:	28 e2       	ldi	r18, 0x28	; 40
 17e:	e2 16       	cp	r14, r18
 180:	59 f5       	brne	.+86     	; 0x1d8 <main+0x114>
 182:	1d c0       	rjmp	.+58     	; 0x1be <main+0xfa>
		{			
			case 1: 
			{
				PORTB =0b00000010;
 184:	c8 ba       	out	0x18, r12	; 24
			//	anticlock forwrard
			
			
			}
				break;
 186:	c2 cf       	rjmp	.-124    	; 0x10c <main+0x48>
			case 2 :
			{
				PORTB =0b00001000;//right
 188:	b8 ba       	out	0x18, r11	; 24
				
			}
				break;
 18a:	c0 cf       	rjmp	.-128    	; 0x10c <main+0x48>
			case 3 :
			{
					PORTB=0b00001010; //right forward	
 18c:	18 bb       	out	0x18, r17	; 24
								
										
			}
				break;
 18e:	be cf       	rjmp	.-132    	; 0x10c <main+0x48>
			case 4 ://left
			{
				PORTB =0b00000100;
 190:	f8 ba       	out	0x18, r15	; 24
				
			}
				break;
 192:	bc cf       	rjmp	.-136    	; 0x10c <main+0x48>
			case 5 ://left forward
			{
						
				PORTB =0b00000110;
 194:	08 bb       	out	0x18, r16	; 24
				
			}
				break;
 196:	ba cf       	rjmp	.-140    	; 0x10c <main+0x48>
			case 8://back
			{
				
				PORTB =0b00000001;	
 198:	d8 ba       	out	0x18, r13	; 24
			}
				break;
 19a:	b8 cf       	rjmp	.-144    	; 0x10c <main+0x48>
			case 10://right backward
			{
				PORTB =0b00001001;		
 19c:	c8 bb       	out	0x18, r28	; 24
			}
				break;
 19e:	b6 cf       	rjmp	.-148    	; 0x10c <main+0x48>
			case 12 ://left back
			{
				PORTB =0b00000101;
 1a0:	d8 bb       	out	0x18, r29	; 24
			}
				break;
 1a2:	b4 cf       	rjmp	.-152    	; 0x10c <main+0x48>
			case 16 :
			case 17 :
			case 24 :
			{
				if(OCR1A<=2900)
 1a4:	8a b5       	in	r24, 0x2a	; 42
 1a6:	9b b5       	in	r25, 0x2b	; 43
 1a8:	2b e0       	ldi	r18, 0x0B	; 11
 1aa:	85 35       	cpi	r24, 0x55	; 85
 1ac:	92 07       	cpc	r25, r18
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <main+0xee>
 1b0:	ad cf       	rjmp	.-166    	; 0x10c <main+0x48>
				{OCR1A+=50;
 1b2:	8a b5       	in	r24, 0x2a	; 42
 1b4:	9b b5       	in	r25, 0x2b	; 43
 1b6:	c2 96       	adiw	r24, 0x32	; 50
 1b8:	9b bd       	out	0x2b, r25	; 43
 1ba:	8a bd       	out	0x2a, r24	; 42
 1bc:	a7 cf       	rjmp	.-178    	; 0x10c <main+0x48>
				break;
			case 33:
			case 40:
			case 32:
			{
					if(OCR1A>=800)
 1be:	8a b5       	in	r24, 0x2a	; 42
 1c0:	9b b5       	in	r25, 0x2b	; 43
 1c2:	23 e0       	ldi	r18, 0x03	; 3
 1c4:	80 32       	cpi	r24, 0x20	; 32
 1c6:	92 07       	cpc	r25, r18
 1c8:	08 f4       	brcc	.+2      	; 0x1cc <main+0x108>
 1ca:	a0 cf       	rjmp	.-192    	; 0x10c <main+0x48>
				
				{OCR1A-=50;
 1cc:	8a b5       	in	r24, 0x2a	; 42
 1ce:	9b b5       	in	r25, 0x2b	; 43
 1d0:	c2 97       	sbiw	r24, 0x32	; 50
 1d2:	9b bd       	out	0x2b, r25	; 43
 1d4:	8a bd       	out	0x2a, r24	; 42
 1d6:	9a cf       	rjmp	.-204    	; 0x10c <main+0x48>
				}				
			}
				break;
			default:
			{
				PORTB =0b00000000;
 1d8:	18 ba       	out	0x18, r1	; 24
			}
			break;
 1da:	98 cf       	rjmp	.-208    	; 0x10c <main+0x48>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
